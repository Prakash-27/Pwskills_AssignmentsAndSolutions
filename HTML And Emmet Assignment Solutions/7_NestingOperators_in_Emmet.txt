7. Explain in brief about the nesting operators in emmet ?

Child: >
You can use > operator to nest elements inside each other

Sibling: +
Use + operator to place elements near each other, on the same level.

Climb-up: ^
With > operator you’re descending down the generated tree and positions of all sibling elements will be resolved against the most deepest element

With ^ operator, you can climb one level up the tree and change context where following elements should appear

You can use as many ^ operators as you like, each operator will move one level up

Multiplication: *
With * operator you can define how many times element should be outputted

Grouping: ()
Parenthesises are used by Emmets’ power users for grouping subtrees in complex abbreviations

If you’re working with browser’s DOM, you may think of groups as Document Fragments: each group contains abbreviation subtree and all the following elements are inserted at the same level as the first element of group.

You can nest groups inside each other and combine them with multiplication * operator

With groups, you can literally write full page mark-up with a single abbreviation, but please don’t do that.

Attribute operators
Attribute operators are used to modify attributes of outputted elements. For example, in HTML and XML you can quickly add class attribute to generated element.

ID and CLASS
In CSS, you use elem#id and elem.class notation to reach the elements with specified id or class attributes. In Emmet, you can use the very same syntax to add these attributes to specified element

Custom attributes
You can use [attr] notation (as in CSS) to add custom attributes to your element

You can place as many attributes as you like inside square brackets.
You don’t have to specify attribute values: td[colspan title] will produce <td colspan="" title=""> with tabstops inside each empty attribute (if your editor supports them).
You can use single or double quotes for quoting attribute values.
You don’t need to quote values if they don’t contain spaces: td[title=hello colspan=3] will work.

Item numbering: $
With multiplication * operator you can repeat elements, but with $ you can number them. Place $ operator inside element’s name, attribute’s name or attribute’s value to output current number of repeated element

You can use multiple $ in a row to pad number with zeroes

Changing numbering base and direction:
With @ modifier, you can change numbering direction (ascending or descending) and base (e.g. start value).

For example, to change direction, add @- after $

To change counter base value, add @N modifier to $

Text: {}
You can use curly braces to add text to element:

Note that {text} is used and parsed as a separate element (like, div, p etc.) but has a special meaning when written right after element. For example, a{click} and a>{click} will produce the same output, but a{click}+b{here} and a>{click}+b{here} won’t

In second example the <b> element is placed inside <a> element. And that’s the difference: when {text} is written right after element, it doesn’t change parent context. Here’s more complex example showing why it is important

In this example, to write Click here to continue inside <p> element we have explicitly move down the tree with > operator after p, but in case of a element we don’t have to, since we need <a> element with here word only, without changing parent context.

Notes on abbreviation formatting:
When you get familiar with Emmet’s abbreviations syntax, you may want to use some formatting to make your abbreviations more readable. For example, use spaces between elements and operators, like this